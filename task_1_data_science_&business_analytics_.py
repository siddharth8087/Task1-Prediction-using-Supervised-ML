# -*- coding: utf-8 -*-
"""Task 1 Data science &Business Analytics .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TSGCftmXJa3uhFet658kbwWexD2Cif3l

# **Data Science & Business Analytics Task**

Name : Siddharth Khurangale

## **Task1** : Prediction using Supervised ML

## **Statement** :Predict the percentage of an student based on the no. of study hours

Github link=

## **Importing Libraries and modules**

---
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing all libraries required in this notebook
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt  
# %matplotlib inline

"""## **Reading the data from link " http://bit.ly/w-data "**



"""

# Reading data from remote link
url = "http://bit.ly/w-data"
s_data = pd.read_csv(url)
print("Data imported successfully")

s_data.head(10)

"""## **Plotting the distribution of scores**

we have use 2D graph to display plot 


"""

# Plotting the distribution of scores
s_data.plot(x='Hours', y='Scores', style='o')  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()

"""## **Preparing the data**
here we are going to divide data in the input and output form
"""

X = s_data.iloc[:, :-1].values  
y = s_data.iloc[:, 1].values

"""now we have split the data using scikit built in method"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, 
test_size=0.2, random_state=0)

"""## **Training The Algorithm**"""

from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit(X_train, y_train) 

print("Training complete.")

"""Here we have plot the test data """

# Plotting the regression line
line = regressor.coef_*X+regressor.intercept_

# Plotting for the test data
plt.scatter(X, y)
plt.plot(X, line);
plt.show()

"""## **Making The predictions**"""

print(X_test) # Testing data - In Hours
y_pred = regressor.predict(X_test) # Predicting the scores

"""Here we have compare actual data with predicted"""

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df

"""## **Test with own data**"""

# You can also test with your own data
hours =[ 9.25]
own_pred = regressor.predict([hours])
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))

"""Here we have test for 9.25 Hours
we can test for different hours also
lets take Hours = 2.7
"""

# You can also test with your own data
hours =[ 2.7]
own_pred = regressor.predict([hours])
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))

"""## **Evaluating The Model**"""

from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(y_test, y_pred))